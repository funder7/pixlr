use std::io;
use std::error::Error;
use crossterm::{event::{self, KeyCode, KeyEvent, KeyModifiers}, terminal, ExecutableCommand};
use ratatui::{backend::CrosstermBackend, Terminal, layout::{Constraint, Direction, Layout}, widgets::{Block, Borders, Paragraph}, style::Color, text::Text};
use image;

const GRID_SIZE: usize = 64;

#[derive(Clone, Copy, PartialEq)]
enum Tool {
    Pen,
    Eraser,
    ColorPicker,
}

struct App {
    grid: [[Option<Color>; GRID_SIZE]; GRID_SIZE],
    cursor_x: usize,
    cursor_y: usize,
    current_tool: Tool,
    current_color: Color,
}

impl App {
    fn new() -> Self {
        Self {
            grid: [[None; GRID_SIZE]; GRID_SIZE],
            cursor_x: 0,
            cursor_y: 0,
            current_tool: Tool::Pen,
            current_color: Color::White,
        }
    }

    fn draw(&self, terminal: &mut Terminal<CrosstermBackend<io::Stdout>>) -> Result<(), Box<dyn Error>> {
        terminal.draw(|frame| {
            let chunks = Layout::default()
                .direction(Direction::Vertical)
                .constraints([Constraint::Percentage(80), Constraint::Percentage(20)].as_ref())
                .split(frame.area());

            let mut grid_text = String::new();
            for y in 0..GRID_SIZE {
                for x in 0..GRID_SIZE {
                    if x == self.cursor_x && y == self.cursor_y {
                        grid_text.push_str("⬜");
                    } else if self.grid[y][x].is_some() {
                        grid_text.push_str("■");
                    } else {
                        grid_text.push_str("·");
                    }
                }
                grid_text.push('\n');
            }
            
            let grid_paragraph = Paragraph::new(grid_text)
                .block(Block::default().borders(Borders::ALL).title("Draw Area"));
            frame.render_widget(grid_paragraph, chunks[0]);

            let tools_text = format!(
                "Tools: [{}] Pen  [{}] Eraser  [{}] Picker\nActive: {} | Color: {:?}\n[Space] Use | [Ctrl+S] Save | [Q] Quit",
                if self.current_tool == Tool::Pen { "X" } else { " " },
                if self.current_tool == Tool::Eraser { "X" } else { " " },
                if self.current_tool == Tool::ColorPicker { "X" } else { " " },
                match self.current_tool {
                    Tool::Pen => "Pen",
                    Tool::Eraser => "Eraser",
                    Tool::ColorPicker => "Picker",
                },
                self.current_color
            );

            let tools_paragraph = Paragraph::new(Text::from(tools_text))
                .block(Block::default().borders(Borders::ALL).title("Tools"));
            frame.render_widget(tools_paragraph, chunks[1]);
        })?;
        Ok(())
    }

    fn handle_input(&mut self, key_event: KeyEvent) {
        match key_event.code {
            KeyCode::Up if self.cursor_y > 0 => self.cursor_y -= 1,
            KeyCode::Down if self.cursor_y < GRID_SIZE - 1 => self.cursor_y += 1,
            KeyCode::Left if self.cursor_x > 0 => self.cursor_x -= 1,
            KeyCode::Right if self.cursor_x < GRID_SIZE - 1 => self.cursor_x += 1,
            KeyCode::Char(' ') => self.apply_tool(),
            KeyCode::Char('s') if key_event.modifiers.contains(KeyModifiers::CONTROL) => self.save_to_bmp(),
            KeyCode::Char('1') => self.current_tool = Tool::Pen,
            KeyCode::Char('2') => self.current_tool = Tool::Eraser,
            KeyCode::Char('3') => self.current_tool = Tool::ColorPicker,
            _ => {}
        }
    }

    fn apply_tool(&mut self) {
        match self.current_tool {
            Tool::Pen => self.grid[self.cursor_y][self.cursor_x] = Some(self.current_color),
            Tool::Eraser => self.grid[self.cursor_y][self.cursor_x] = None,
            Tool::ColorPicker => {
                if let Some(color) = self.grid[self.cursor_y][self.cursor_x] {
                    self.current_color = color;
                }
            }
        }
    }

    fn save_to_bmp(&self) {
        let mut img = image::RgbImage::new(GRID_SIZE as u32, GRID_SIZE as u32);
        for (y, row) in self.grid.iter().enumerate() {
            for (x, &cell) in row.iter().enumerate() {
                let color = cell.unwrap_or(Color::Black);
                let rgb = color_to_rgb(color);
                img.put_pixel(x as u32, y as u32, image::Rgb(rgb));
            }
        }
        img.save("output.bmp").unwrap();
    }
}

fn color_to_rgb(color: Color) -> [u8; 3] {
    match color {
        Color::Rgb(r, g, b) => [r, g, b],
        Color::Black => [0, 0, 0],
        Color::White => [255, 255, 255],
        Color::Red => [255, 0, 0],
        Color::Green => [0, 255, 0],
        Color::Blue => [0, 0, 255],
        _ => [128, 128, 128],
    }
}

fn main() -> Result<(), Box<dyn Error>> {
    terminal::enable_raw_mode()?;
    let mut stdout = io::stdout();
    stdout.execute(terminal::EnterAlternateScreen)?;
    let backend = CrosstermBackend::new(stdout);
    let mut terminal = Terminal::new(backend)?;
    let mut app = App::new();

    loop {
        app.draw(&mut terminal)?;
        if let Ok(true) = event::poll(std::time::Duration::from_millis(100)) {
            if let event::Event::Key(key) = event::read()? {
                if key.code == KeyCode::Char('q') {
                    break;
                }
                app.handle_input(key);
            }
        }
    }

    terminal::disable_raw_mode()?;
    Ok(())
}
